import scala.util.control.Breaks._

object HelloWorld {
  val const: Int = 19

  def main(args: Array[String]): Unit = {
    managementStructures()
    collections()
    traitsAndClasses()
  }

  private def managementStructures(): Unit = {
    var x = 0
    var y: Int = 1

    breakable {
      while ( (x<5) && (y==1) ){
        x = x+1
        break()
      }
    }

    if(x>0) println("positive x = "+x)
    else if (x<0) println("negative x = "+x)
    else println (x)

    x match {
      case 0 => y = x/1
      case 1 => basicVariables()
      case _ => y = x*2
    }
    println(y*x)

    try {
      val divisionResult = divide(10, 0)
      println("Division Result: "+divisionResult)
    } catch {
      case e: ArithmeticException =>
        println("Caught an exception: " + e.getMessage)
    } finally {
      y = divide(10,2)
    }
  }

  private def divide(a: Int, b: Int): Int = {
    a / b
  }

  private def collections():Unit = {
    val fruits = List("apple", "banana", "lime", "orange")
    val fruitLengths = for {
      f <- fruits
      if f.length > 4
    } yield f.length
    fruitLengths.foreach(println)
    var bob = double(3)
    println(bob)
    val nums = List(1, 3, 5, 7, 9, 10)
    var x = List[Int]()
    for (num <- nums) {
      if (num > 3 && num < 7) {
        x = x :+ (num * 10)
      }
    }
  }

  def double(i: Int): Int = i * 2

  def basicVariables(): Unit = {
    val a = 10
    val b: Byte = 1
    val i: Int = 1 + const
    val l: Long = 1
    val s: Short = 1
    val d: Double = 2.0
    val msg = "Hello, world!"
    println("variables: " + a + ", " + b + ", " + i + ", " + l + ", " + s + ", " + d + ", " + msg)
  }

  private def traitsAndClasses(): Unit = {
    val person = new Person("John", 30)
    println("Person: " + person.name + ", Age: " + person.age)

    val runner = new Runner {}
    runner.startRunning()
    runner.stopRunning()
  }

  class Person(val name: String, val age: Int)

  trait Runner {
    def startRunning(): Unit = println("Running...")
    def stopRunning(): Unit = println("Stopped running")
  }

  def add(a: Int, b: Int): Int = {
    a + b
  }
}